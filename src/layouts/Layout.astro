---
import Header from '../components/Header.astro';
import Footer from '../components/Footer.astro';

interface Props {
    title: string;
    description: string;
}

const { description, title } = Astro.props;
---

<!doctype html>
<html lang="es">
    <head>
        <meta charset="UTF-8" />
        <meta name="description" content={description} />
        <meta name="viewport" content="width=device-width" />
        <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
        <meta name="generator" content={Astro.generator} />
        <title>{title}</title>
    </head>
    <body>
        <div id="stars"></div>
        <div id="stars2"></div>
        <div id="stars3"></div>
        
        <slot />
        <Footer />
    </body>
</html>

<script>
    // Theme detection and handling
    const theme = (() => {
        if (typeof localStorage !== 'undefined' && localStorage.getItem('theme')) {
            return localStorage.getItem('theme');
        }
        if (window.matchMedia('(prefers-color-scheme: dark)').matches) {
            return 'dark';
        }
        return 'light';
    })();

    if (theme === 'light') {
        document.documentElement.classList.remove('dark');
    } else {
        document.documentElement.classList.add('dark');
    }

    

    // Listen for theme changes
    window.matchMedia('(prefers-color-scheme: dark)').addEventListener('change', (e) => {
        const newTheme = e.matches ? 'dark' : 'light';
        if (newTheme === 'dark') {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }
        window.localStorage.setItem('theme', newTheme);
    });
</script>

<style is:global>
    :root {
        color-scheme: light dark;
    }
    
    html {
        font-family: 'Onest Variable', system-ui, sans-serif;
        scroll-behavior: smooth;
    }
    
    body {
        background: var(--bg-gradient);
        color: var(--text-color);
        display: flex;
        flex-direction: column;
        min-height: 100vh;
        margin: 0;
        position: relative;
        overflow-x: hidden;
        transition: background 0.3s ease-in-out, color 0.3s ease-in-out;
    }

    /* Theme variables */
    :root {
        --bg-gradient: radial-gradient(ellipse at bottom, #ffffff 0%, #f0f0f0 100%);
        --text-color: #000000;
    }

    :root.dark {
        --bg-gradient: radial-gradient(ellipse at bottom, #1B2735 0%, #090A0F 100%);
        --text-color: #ffffff;
    }

    /* Stars animation */
    #stars, #stars2, #stars3 {
        position: fixed;
        top: 0;
        left: 0;
        right: 0;
        bottom: 0;
        z-index: -1;
        overflow: hidden;
        opacity: 0;
        transition: opacity 0.3s ease-in-out;
    }

    .dark #stars,
    .dark #stars2,
    .dark #stars3 {
        opacity: 1;
    }

    #stars {
        width: 1px;
        height: 1px;
        background: transparent;
        box-shadow: 1560px 989px #FFF , 1569px 834px #FFF , 452px 605px #FFF;
        animation: animStar 10s linear infinite;
    }

    #stars2 {
        width: 2px;
        height: 2px;
        background: transparent;
        box-shadow: 1327px 578px #FFF , 1761px 950px #FFF , 1332px 714px #FFF;
        animation: animStar 100s linear infinite;
    }

    #stars3 {
        width: 3px;
        height: 3px;
        background: transparent;
        box-shadow: 1359px 843px #FFF , 1773px 1687px #FFF , 1635px 1783px #FFF;
        animation: animStar 150s linear infinite;
    }

    @keyframes animStar {
        from {
            transform: translateY(0px);
        }
        to {
            transform: translateY(-2000px);
        }
    }

    @media (prefers-reduced-motion: reduce) {
        html {
            scroll-behavior: auto;
        }
        
        body {
            transition: none;
        }
        
        #stars, #stars2, #stars3 {
            animation: none;
            transition: none;
        }
    }
</style>